{"ast":null,"code":"//import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions; // const counterReducer = (state = initialState, action) => {\n//    if (action.type === 'increment') {\n//       return { ...state, counter: state.counter + 1}\n//    }\n//\n//    if (action.type === 'increase') {\n//       return {\n//          counter: state.counter + action.amount,\n//          showCounter: state.showCounter\n//       }\n//    }\n//\n//    if (action.type === 'decrement') {\n//       return {\n//          counter: state.counter - 1,\n//          showCounter: state.showCounter\n//       };\n//    }\n//\n//    if (action.type === 'toggle') {\n//       return {\n//         showCounter: !state.showCounter,\n//         counter: state.counter\n//       };\n//    }\n//\n//    return state;\n// };\n//const store = createStore(counterReducer);\n\nexport default store;","map":{"version":3,"sources":["C:/workspace/react-course/redux-toolkit/src/store/index.js"],"names":["createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAEA,MAAMC,mBAAmB,GAAG;AACzBC,EAAAA,OAAO,EAAE,CADgB;AAEzBC,EAAAA,WAAW,EAAE;AAFY,CAA5B;AAKA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC9BM,EAAAA,IAAI,EAAE,SADwB;AAE9BC,EAAAA,YAAY,EAAEL,mBAFgB;AAG9BM,EAAAA,QAAQ,EAAE;AACPC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACdA,MAAAA,KAAK,CAACP,OAAN;AACF,KAHM;;AAIPQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACdA,MAAAA,KAAK,CAACP,OAAN;AACF,KANM;;AAOPS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACrBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACF,KATM;;AAUPC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACF;;AAZM;AAHoB,CAAD,CAAhC;AAmBA,MAAMY,gBAAgB,GAAG;AACtBC,EAAAA,eAAe,EAAE;AADK,CAAzB;AAIA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC3BM,EAAAA,IAAI,EAAE,gBADqB;AAE3BC,EAAAA,YAAY,EAAES,gBAFa;AAG3BR,EAAAA,QAAQ,EAAE;AACPW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACF,KAHM;;AAIPG,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACXA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACF;;AANM;AAHiB,CAAD,CAA7B;AAaA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AAC1BqB,EAAAA,OAAO,EAAE;AACNnB,IAAAA,OAAO,EAAEE,YAAY,CAACiB,OADhB;AAENC,IAAAA,IAAI,EAAEL,SAAS,CAACI;AAFV;AADiB,CAAD,CAA5B;AAOA,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAApC;AACP,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAA9B,C,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,eAAeJ,KAAf","sourcesContent":["//import { createStore } from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\nconst initialCounterState = {\r\n   counter: 0,\r\n   showCounter: true\r\n}\r\n\r\nconst counterSlice = createSlice({\r\n   name: 'counter',\r\n   initialState: initialCounterState,\r\n   reducers: {\r\n      increment(state) {\r\n         state.counter++;\r\n      },\r\n      decrement(state) {\r\n         state.counter--;\r\n      },\r\n      increase(state, action) {\r\n         state.counter = state.counter + action.payload;\r\n      },\r\n      toggleCounter(state) {\r\n         state.showCounter = !state.showCounter;\r\n      },\r\n   }\r\n});\r\n\r\nconst initialAuthState = {\r\n   isAuthenticated: false\r\n}\r\n\r\nconst authSlice = createSlice({\r\n   name: 'authentication',\r\n   initialState: initialAuthState,\r\n   reducers: {\r\n      login(state) {\r\n         state.isAuthenticated = true;\r\n      },\r\n      logout(state) {\r\n         state.isAuthenticated = false;\r\n      }\r\n   }\r\n});\r\n\r\nconst store = configureStore({\r\n   reducer: {\r\n      counter: counterSlice.reducer,\r\n      auth: authSlice.reducer\r\n   }\r\n});\r\n\r\nexport const counterActions = counterSlice.actions;\r\nexport const authActions = authSlice.actions;\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//    if (action.type === 'increment') {\r\n//       return { ...state, counter: state.counter + 1}\r\n//    }\r\n//\r\n//    if (action.type === 'increase') {\r\n//       return {\r\n//          counter: state.counter + action.amount,\r\n//          showCounter: state.showCounter\r\n//       }\r\n//    }\r\n//\r\n//    if (action.type === 'decrement') {\r\n//       return {\r\n//          counter: state.counter - 1,\r\n//          showCounter: state.showCounter\r\n//       };\r\n//    }\r\n//\r\n//    if (action.type === 'toggle') {\r\n//       return {\r\n//         showCounter: !state.showCounter,\r\n//         counter: state.counter\r\n//       };\r\n//    }\r\n//\r\n//    return state;\r\n// };\r\n\r\n//const store = createStore(counterReducer);\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}